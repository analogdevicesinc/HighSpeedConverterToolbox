@Library('tfc-lib') _

dockerConfig = getDockerConfig(['MATLAB','Vivado'], matlabHSPro=false)
dockerConfig.add("-e MLRELEASE=R2023b")
dockerConfig.add("-e VIVADORELEASE=2022.2")
dockerHost = 'docker'

////////////////////////////

hdlBranches = ['hdl_2022_r2']

stage("Build Toolbox") {
    dockerParallelBuild(hdlBranches, dockerHost, dockerConfig) { 
	branchName ->
	try {
		withEnv(['HDLBRANCH='+branchName,'LC_ALL=C.UTF-8','LANG=C.UTF-8']) {
		    checkout scm
		    sh 'git submodule update --init' 
		    sh 'make -C ./CI/scripts build'
		    sh 'make -C ./CI/scripts gen_tlbx'
		}
        } catch(Exception ex) {
		if (branchName == 'hdl_2022_r2') {
		    error('Production Toolbox Build Failed')
		}
		else {
		    unstable('Development Build Failed')
		}
        }
        if (branchName == 'hdl_2022_r2') {
            stash includes: '**', name: 'builtSources', useDefaultExcludes: false
        }
    }
}

/////////////////////////////////////////////////////

boardNames = ['daq2_zcu102','ad9081_fmca_ebz_zcu102','ad9434_fmc_zc706',
    'ad9739a_fmc_zc706','ad9265_fmc_zc706', 'fmcjesdadc1_zc706','ad9783_ebz_zcu102',
    'ad9208_dual_ebz_vcu118']

// Create unique closure for each board and run in parallel
def deployments = [:]
for (int i=0; i < boardNames.size(); i++) {
    def board = boardNames[i];
    def nodeLabel = 'baremetal';
    if (board.contains("zcu102") || board.contains("vcu118"))
        nodeLabel = 'baremetal && high_memory';
    deployments[board] = { node(nodeLabel) {
        stage("Synthesis Tests") {
            withEnv(['BOARD='+board,'MLRELEASE=R2023b','HDLBRANCH=hdl_2022_r2','LC_ALL=C.UTF-8','LANG=C.UTF-8']) {
                try {
                    stage("Synth") {
                        echo "Node: ${env.NODE_NAME}"
                        unstash "builtSources"
                        sh 'apt install -y xvfb'
                        sh 'echo "BOARD:$BOARD"'
                        sh 'make -C ./CI/scripts test_synth'
                        junit testResults: 'test/*.xml', allowEmptyResults: true
                        archiveArtifacts artifacts: 'test/*', followSymlinks: false, allowEmptyArchive: true
                    }
		    if (!board.contains("pluto") && !board.contains("vcu118")) {
			    stage("Upload BOOT.BINs") {
				sh 'mkdir bootbins'
				sh 'mv test/*.BIN bootbins/'
				uploadArtifactory('HighSpeedConverterToolbox','bootbins/*.BIN*')
			    }
		    }
                }
                finally {
                    cleanWs();
                }
            }
        }
    }}
}

parallel deployments


/////////////////////////////////////////////////////
node {
    stage("Trigger Harness") {
        echo "Node: ${env.NODE_NAME}"
        unstash "builtSources"
        triggerHWHarness("HighSpeedConverterToolbox")
    }
}
