// Pipeline
lock(label: 'adgt_test_harness_boards') {
  @Library('sdgtt-lib@adgt-test-harness') _ // Not necessary when we turn on global libraries :)
  def hdlBranch = "NA"
  def linuxBranch = "NA"
  def bootPartitionBranch = "release"
  def firmwareVersion = 'v0.32'
  def bootfile_source = 'artifactory' // options: sftp, artifactory, http, local
  def harness = getGauntlet(hdlBranch, linuxBranch, bootPartitionBranch, firmwareVersion, bootfile_source)

  //Udpate repos
  harness.set_env('nebula_repo', 'https://github.com/sdgtt/nebula.git')
  harness.set_env('nebula_branch', 'dev_fixes')
  harness.set_env('libiio_branch', 'v0.21')
  harness.set_env('telemetry_repo', 'https://github.com/sdgtt/telemetry.git')
  harness.set_env('telemetry_branch', 'master')
  harness.set_env('matlab_repo', 'https://github.com/analogdevicesinc/HighSpeedConverterToolbox.git') // Not necessary when using checkout scm
  harness.set_env('matlab_release','R2021a')

  //Update agent with the required deps
  harness.update_agents()

  //Set other test parameters
  harness.set_nebula_debug(true)
  harness.set_enable_docker(true)
  harness.set_docker_host_mode(false)
  harness.set_send_telemetry(false)
  harness.set_enable_resource_queuing(true)
  harness.set_lock_agent(true) // Required for MATLAB toolbox tests
  harness.set_elastic_server('192.168.10.1')
  harness.set_required_hardware(["zynq-zc706-adv7511-fmcdaq2"])
  harness.set_docker_args(['Vivado', 'MATLAB'])
  harness.set_nebula_local_fs_source_root("artifactory.analog.com")

  // Set stages (stages are run sequentially on agents)
  // harness.add_stage(harness.stage_library("UpdateBOOTFiles"), 'stopWhenFail',
  //                  harness.stage_library("RecoverBoard"))

  // Test stage
  harness.set_matlab_commands(["addpath(genpath('test'))",
                        "pyenv('Version','/usr/bin/python3')",
                        "runHWTests(getenv('board'))"])
  harness.add_stage(harness.stage_library("MATLABTests"),'continueWhenFail')
  
  harness.add_stage(harness.stage_library('SendResults'),'continueWhenFail')

  // // Go go
  harness.run_stages()
}